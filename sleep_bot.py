import telebot
from datetime import datetime
from telebot import types
import config

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω tg-–±–æ—Ç–∞
TOKEN = config.API_token
bot = telebot.TeleBot(TOKEN)

sleep_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message,f'–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞!\n\n' 
                              f'–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n \n/sleep - –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è \n/wake - –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞'
                              f'\n/quality - –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–Ω \n/notes - –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏')

@bot.message_handler(commands=['sleep'])
def sleep_start(message):
    user_id = message.from_user.id
    sleep_data[user_id] = {'start_time': datetime.now()}
    bot.reply_to(message, '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ù–µ –∑–∞–±—É–¥—å —Å–æ–æ–±—â–∏—Ç—å –º–Ω–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω–µ—à—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /wake')


@bot.message_handler(commands=['wake'])
def sleep_end(message):
    user_id = message.from_user.id
    if user_id not in sleep_data:
        bot.reply_to(message, '–Ø –Ω–µ –≤–∏–∂—É, —á—Ç–æ —Ç—ã —Å–æ–æ–±—â–∏–ª –º–Ω–µ –æ –Ω–∞—á–∞–ª–µ —Å–Ω–∞')
    else:
        sleep_time = sleep_data[user_id]['start_time']
        awake_time = datetime.now()
        sleep_duration = awake_time - sleep_time
        hours_slept = round(sleep_duration.total_seconds() / 3600, 3)
        sleep_data[user_id]['duration'] = hours_slept
        bot.reply_to(message, f'–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢—ã –ø—Ä–æ—Å–ø–∞–ª –æ–∫–æ–ª–æ {hours_slept} —á–∞—Å–æ–≤.\n\n\n'
                                    f'–ß—Ç–æ-–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞ –Ω–∞–∂–º–∏ /quality')

@bot.message_handler(commands=['quality'])
def sleep_quality(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞
    button1 = types.KeyboardButton('üòç')
    button2 = types.KeyboardButton('üòå')
    button3 = types.KeyboardButton('ü•±')
    button4 = types.KeyboardButton('üò©')
    button5 = types.KeyboardButton('üòë')
    bot.reply_to(message, f'–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞ => \n \n \n –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É:'
                                f'\n 5 - üòç –í—ã—Å–ø–∞–ª—Å—è –∏ –ø–æ–ª–æ–Ω —Å–∏–ª \n 4 - üòå –°–ø–∞–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ'
                                f'\n 3 - ü•± –ß–∞—à–∫–∞ –∫–æ—Ñ–µ –º–Ω–µ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç \n 2 - üò© –ù—É —Ç–∞–∫–æ–µ —Å–µ–±–µ'
                                f'\n 1 - üòë –Ø —Ç–æ—á–Ω–æ –Ω–µ –∂–∞–≤–æ—Ä–æ–Ω–æ–∫!')

    markup.add(button1, button2, button3, button4, button5)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–Ω–∞:', reply_markup= markup)

    @bot.message_handler(content_types=["text"])
    def sleep_text(message):
        a = types.ReplyKeyboardRemove()
        # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        dict_answer = {'üòç': 5,
                       'üòå': 4,
                       'ü•±': 3,
                       'üò©': 2,
                       'üòë': 1}
        # —É–∑–Ω–∞–µ–º id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if message.text in dict_answer.keys():
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å grade –∏ –∑–∞–Ω–æ—Å–∏–º —Ç—É–¥–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–Ω—è–º
            sleep_data[user_id]['grade'] = dict_answer[message.text]
            bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã)\n\n\n'
                                               f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–≤–æ–µ–º —Å–Ω–µ –Ω–∞–∂–º–∏ /notes', reply_markup=a)
        else:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å grade –∏ –∑–∞–Ω–æ—Å–∏–º —Ç—É–¥–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–Ω—è–º
            sleep_data[user_id]['notes'] = message.text
            bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –ó–∞–º–µ—Ç–∫–∏ –æ —Ç–≤–æ–µ–º —Å–Ω–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n'
                                              f'–ù–µ –∑–∞–±—ã–≤–∞–π –≤–µ—á–µ—Ä–æ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /sleep')



@bot.message_handler(commands=["notes"])
def sleep_notes(message):
    bot.send_message(message.chat.id, f'–ó–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Å–Ω–∞\n\n'
                                      f'–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–Ω–∏–ª–∏—Å—å –∫–æ—à–º–∞—Ä—ã, —Å–ø–∞–ª–æ—Å—å –æ—Ç–ª–∏—á–Ω–æ, –≤—Å—é –Ω–æ—á—å –ø—Ä–æ—Å—ã–ø–∞–ª—Å—è')


bot.polling()

print(sleep_data)

'''–ß–∞—Å—Ç—å 2. –ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î'''

import psycopg2

try:
    # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = psycopg2.connect(dbname='postgres',
                                  user='postgres',
                                  password='postgres',
                                  host="localhost")

    connection.autocommit = True

    # —Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–∏ id –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∑–æ–≤–∞—Ç–µ–ª—è
    #with connection.cursor() as cursor:
    #    cursor.execute(
    #        """CREATE TABLE users(
    #            id_user serial PRIMARY KEY,
    #            id_tg INT);"""
    #    )

    #    print("[INFO] Table created successfully")

    # delete a table
    #with connection.cursor() as cursor:
    #    cursor.execute(
    #        """DROP TABLE users;"""
    #    )

    #    print("[INFO] Table was deleted")

    # —Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #with connection.cursor() as cursor:
    #    cursor.execute(
    #        """CREATE TABLE info_users(
    #            info_id serial PRIMARY KEY,
    #            start_time DATE,
    #            duration DECIMAL(8,2),
    #            grade INT,
    #            notes VARCHAR(300),
    #            id_user INT NOT NULL,
    #            FOREIGN KEY (id_user) REFERENCES users (id_user) ON DELETE CASCADE);"""
    #    )

    #    print("[INFO] Table created successfully")

    # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    users = list(sleep_data.keys())

    # —Å–æ–∑–¥–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–π id
    for user in users:
        user_db = (str(user),)
        # –¥–æ–±–∞–≤–ª—è—é –∑–∞–ø–∏—Å–∏ –≤ –ë–î users
        with connection.cursor() as cursor:
            cursor.execute(
                """INSERT INTO users (id_tg)
                VALUES (%s);""", user_db
            )

            print("[INFO] Data USERS was succefully inserted")

        # –Ω–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user
        recording_day = str(sleep_data[user]['start_time']).split()[0]
        duration = sleep_data[user]['duration']
        grade = sleep_data[user].get('grade', '')
        notes = sleep_data[user].get('notes', '')

        # –∑–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user –≤ —Ç–∞–±–ª–∏—Ü—É info_users
        cursor = connection.cursor()
        cursor.execute("""SELECT id_user FROM users WHERE id_tg = (%s);""", user_db)
        id_user_db = cursor.fetchone()

        values = (recording_day, duration, grade, notes, id_user_db)

        cursor.execute("""INSERT INTO info_users (start_time, duration, grade, notes, id_user)
                VALUES (%s, %s, %s, %s, %s);""", values)

        print("[INFO] Data INFO_USERS was succefully inserted")


except Exception as _ex:
    print("[INFO] Error while working with PostgreSQL", _ex)
finally:
    if connection:
        connection.close()
        print("[INFO] PostgreSQL connection closed")


